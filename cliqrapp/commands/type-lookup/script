#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: cliqrapp:type-lookup: "retrun cloud type"
#/ usage: rerun cliqrapp:type-lookup  --typename <>  --cloud_tag <VMWEE> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh type-lookup || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: cliqrapp:type-lookup. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: TYPENAME CLOUD_TAG

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

test -f ~/.cliqr.env && . ~/.cliqr.env
F=/tmp/types.json.$$
REGION_NAME=`sed '1s/^/{/' $RERUN_MODULE_DIR/lib/$CLOUD_TAG.TAGFILE|sed '$s/$/}/'|jq -r '.cloudParams.cloud'`
CLOUD_NAME=`echo $REGION_NAME|awk -F- '{print $1}'`
url="https://$SERVER/v1/tenants/1/clouds"
CLOUDID=`curl -sS -k -u $API_USER:$API_PASSWORD -H 'Content-Type: application/json' $url |jq -r '.clouds[]|select ( .name == "'$CLOUD_NAME'" )| .id'`
url="https://$SERVER/v1/tenants/1/clouds/$CLOUDID/regions"
REGIONID=`curl -sS -k -u $API_USER:$API_PASSWORD -H 'Content-Type: application/json' $url |jq -r '.cloudRegions[]|select ( .regionName == "'$REGION_NAME'" )| .id'`
#://10.26.113.117/v1/tenants/1/clouds|jq .clouds[]|select .name = "CICD_Openstack_Sandbox"
export url="https://$SERVER/v1/tenants/1/clouds/$CLOUDID/regions/$REGIONID/instanceTypes"
curl -sS -k -u $API_USER:$API_PASSWORD -H "Content-Type: application/json" $url|jq -r '.cloudInstanceTypes[] | select ( .name == "'$TYPENAME'" )| .type'
#jq -c ' .apps[]|{id,serviceTierId}'




# Done. Exit with last command exit status.
exit $?

