#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: cliqrapp:get-ssh-key: "get the ssh key from gui"
#/ usage: rerun cliqrapp:get-ssh-key [options]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh get-ssh-key || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: cliqrapp:get-ssh-key. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: 

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------
test -f ~/.cliqr.env && . ~/.cliqr.env
curl -k -H "X-CLIQR-API-KEY-AUTH:true" -H "Content-Type:application/json" -u $API_USER:$API_PASSWORD https://$SERVER/v1/user/keys >~/.ssh/$API_USER.$SERVER.all.json
clouds=`jq -r .sshKeys[].cloud < ~/.ssh/$API_USER.$SERVER.all.json`
for cloud in $clouds
do
echo $cloud
jq -r ".sshKeys[] | select( .cloud == \"$cloud\" )| .key"  < ~/.ssh/$API_USER.$SERVER.all.json >~/.ssh/id_rsa.$API_USER.$SERVER.$cloud.pem
chmod 700 ~/.ssh/*.pem
done
echo add this to your ~/.ssh/config to just login to the nodes you will need to change the cloud .....
cat <<EOF
Host 10.27.106.*
 user $API_USER
 IdentityFile ~/.ssh/id_rsa.$API_USER.$SERVER.DTV_VMware_EEPOP-MSDC.pem
 StrictHostKeyChecking no

Host 10.223.*
 user $API_USER
 IdentityFile ~/.ssh/id_rsa.$API_USER.$SERVER.DTV_AWS_DevPI-us-west-2.pem
 StrictHostKeyChecking no

Host 10.27.*
 user $API_USER
 IdentityFile ~/.ssh/id_rsa.$API_USER.$SERVER.DTV_VMware_PIPOP-MSDC_PI.pem
 StrictHostKeyChecking no
EOF

# - - -
# Put the command implementation here.
# - - -

# Done. Exit with last command exit status.
exit $?

