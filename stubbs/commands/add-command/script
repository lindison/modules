#!/usr/bin/env bash
#
#/ command: stubbs:add-command: "add a new command"
#/ usage: stubbs:add-command  --command|-c <> --module|-m <> [-overwrite]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions and those defined for @MODULE@.
. $RERUN_MODULE_DIR/lib/functions.sh add-command || { 
    echo >&2 "failed loading function library" ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: stubbs:add-command. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail


# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: COMMAND DESCRIPTION MODULE OVERWRITE 

# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
    # options without arguments
	# options with arguments
	-c|--command)
	    rerun_option_check "$#" "$1"
	    COMMAND="$2"
	    shift
	    ;;
	--description)
	    rerun_option_check "$#" "$1"
	    DESCRIPTION="$2"
	    shift
	    ;;
	-m|--module)
	    rerun_option_check "$#" "$1"
	    MODULE="$2"
	    shift
	    ;;
	--overwrite)
	    rerun_option_check "$#" "$1"
	    OVERWRITE="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_option_usage
        exit 2
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post processes the options

[ -z "${MODULE:-}" ] && {
    echo "Module: "
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

[ -z "${COMMAND:-}" ] && {
    echo "Command: "
    read COMMAND
}

[ -z "${DESCRIPTION:-}" ] && {
    echo "Description: "
    read DESCRIPTION
}


STUB=$RERUN_MODULE_DIR/lib/stub/bash

OPTIONS_SCRIPT=$(rerun_property_get $STUB OPTIONS_SCRIPT)

RERUN_MODULE_HOME_DIR=$(rerun_module_exists $MODULE)

OPTIONS_PARSER_SCRIPT=$RERUN_MODULE_HOME_DIR/commands/$COMMAND/$OPTIONS_SCRIPT


# Create command structure
mkdir -p $RERUN_MODULE_HOME_DIR/commands/$COMMAND || rerun_die "Failed creating command structure"

VARIABLES=$(stubbs_option_variables $RERUN_MODULE_HOME_DIR $COMMAND)

TEMPLATE_COMMAND_SCRIPT=$(rerun_property_get $STUB TEMPLATE_COMMAND_SCRIPT)

TEMPLATE=$STUB/$TEMPLATE_COMMAND_SCRIPT
[ ! -f "$TEMPLATE" ] && {
    rerun_syntax_error "command script template not found: \"$TEMPLATE\""
}


CMD_SCRIPT=$RERUN_MODULE_HOME_DIR/commands/$COMMAND/$(basename $TEMPLATE_COMMAND_SCRIPT)

# Generate a boiler plate implementation
[ ! -f $CMD_SCRIPT -o -n "${OVERWRITE:-}" ] && {
    sed -e "s/@COMMAND@/$COMMAND/g" \
	-e "s/@MODULE@/$MODULE/g" \
	-e "s^@DESCRIPTION@^$DESCRIPTION^g" \
    -e "s/@VARIABLES@/$VARIABLES/g" \
	$TEMPLATE > $CMD_SCRIPT || rerun_die "Failed generating stub comand script."
    rerun_log info "Wrote command script: $CMD_SCRIPT"
}
chmod +x $CMD_SCRIPT || rerun_die "Failed settng execute bit on command script."

# Generate a unit test script
mkdir -p $RERUN_MODULE_HOME_DIR/tests || rerun_die "failed creating tests directory"
[ ! -f $RERUN_MODULE_HOME_DIR/tests/$COMMAND-1-test.sh -o -n "${OVERWRITE:-}" ] && {
    sed -e "s/@MODULE@/$MODULE/g" \
	-e "s/@COMMAND@/$COMMAND/g" \
	-e "s;@RERUN@;${RERUN};g" \
	-e "s;@RERUN_MODULES@;${RERUN_MODULES};g" \
	$RERUN_MODULE_DIR/templates/test.roundup > $RERUN_MODULE_HOME_DIR/tests/$COMMAND-1-test.sh || rerun_die
    rerun_log info "Wrote test script: $RERUN_MODULE_HOME_DIR/tests/$COMMAND-1-test.sh"
}
[ ! -f $RERUN_MODULE_HOME_DIR/tests/functions.sh -o -n "${OVERWRITE:-}" ] && {
    sed -e "s/@MODULE@/$MODULE/g" \
	$RERUN_MODULE_DIR/templates/test.functions.sh > $RERUN_MODULE_HOME_DIR/tests/functions.sh || rerun_die "Failed generating test functions library."
}

# Generate command metadata
(
cat <<EOF
# command metadata
# generated by stubbs:add-command
# $(date)
NAME=$COMMAND
DESCRIPTION="$DESCRIPTION"
OPTIONS=
EOF

) > $RERUN_MODULE_HOME_DIR/commands/$COMMAND/metadata || rerun_die "Failed creating command metadata."


# Done.
