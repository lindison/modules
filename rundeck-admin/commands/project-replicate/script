#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:project-replicate: "replicate the projects from one rundeck to another."
#/ usage: rerun rundeck-admin:project-replicate  --url <>  --to-url <>  --project <>  --user <>  --password <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh project-replicate || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-admin:project-replicate. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: URL TO_URL PROJECT USER PASSWORD

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

# The credentials used to login to the rundecks
declare -r CREDS="--user ${USER} --password ${PASSWORD}"

# List the projects in the source rundeck.
declare -ar rundeck1_projects=( $(rerun rundeck-admin:project-list $CREDS --url $URL) )

# Generate the list of projects matching the specified name or regexp.
declare -a projects_to_replicate
for p in ${rundeck1_projects[*]:-}
do
    [[ $p =~ $PROJECT ]] && projects_to_replicate=( ${projects_to_replicate[*]:-} $p )
done

if [ ${#projects_to_replicate[*]} -lt 1 ]
then
    echo >&2 "Project \"$PROJECT\" did not match any of: [${rundeck1_projects[*]}]"
    exit 0
fi

# List the existing projects in the target rundecks.
declare -ar rundeck2_projects=( $(rerun rundeck-admin:project-list $CREDS --url $TO_URL) )

echo >&2 "Replicating projects: [${projects_to_replicate[*]:-}] ..."

for project in ${projects_to_replicate[*]:-}
do
     rerun rundeck-admin:project-export $CREDS --url $URL \
        --project ${project} --archive $project.zip

     # Check if the project exists in the target and...
     if ! rerun_list_contains $project ${rundeck2_projects[*]} 
     then
         # ... create the project in the target rundeck.
         rerun rundeck-admin:project-create $CREDS \
             --url $TO_URL --project $project
         echo >&2 "You may need to replicate $URL $PROJECT project configuration to $TO_URL"
     fi
     # Import the archive to the target rundeck.
     rerun rundeck-admin:project-import $CREDS --url $TO_URL \
        --project ${project} --archive $project.zip 
        echo >&2 "Imported ${project} to $TO_URL."
done


# Done. Exit with last command exit status.
exit $?

