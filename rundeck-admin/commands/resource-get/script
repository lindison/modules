#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:resource-get: "get resource info."
#/ usage: rerun rundeck-admin:resource-get  --user <>  --password <>  --url <>  --resource <>  --project <> [ --file <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh resource-get || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-admin:resource-get. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: USER PASSWORD URL RESOURCE FORMAT PROJECT FILE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

: ${FORMAT:=xml}
case $FORMAT in
    xml|yaml) ;;
    *) rerun_die 2 "invalid argument. --format <xml|yaml>"
esac

# Authenticate.
# --------------
rundeck_login $URL $USER $PASSWORD


# Get the resources for the project.
# ----------------------------------
APIURL="${URL}/api/3/resource/$RESOURCE?project=${PROJECT}&format=${FORMAT}"
CURL_OUT=$(mktemp "/tmp/curl.out.XXXXX")

if ! rundeck_curl -o $CURL_OUT -X GET $APIURL
then
    rerun_die 3 "API error: $APIURL"
fi    

# Check if the result is an xml file.
# It might be valid xml containing api error information.
# Fail the command if the api returned an error.

if ! xmlstarlet val -q $CURL_OUT
then :; # do nothing. it is not xml.
else
    # it is xml. check if it has an api result.
    if ! error=$(xmlstarlet sel -t -m "/result" -v @error $CURL_OUT)
    then :; # do nothing. it is not a result xml.
    else
        # it is an api result. fail the command if the api returned an error.
        [ "$error" = "true" ] && {
            rerun_die 3 $(xmlstarlet sel -t -m "/result/error" -v message $CURL_OUT)
        }
    fi
fi

#
# Store the results in the specified file otherwise write it to stdout.
#
if [ -n "$FILE" ]
then cp  $CURL_OUT $FILE
else cat $CURL_OUT
fi

# Clean up temp file.
rm $CURL_OUT


# Done. Exit with last command exit status.
exit $?

